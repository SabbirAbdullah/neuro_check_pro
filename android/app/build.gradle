plugins {
    id("com.android.application")
    id("kotlin-android")
    id("dev.flutter.flutter-gradle-plugin")
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("neuro_key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.example.neuro_check_pro"
    compileSdk = 36

    defaultConfig {
        applicationId = "com.example.neuro_check_pro"
        minSdk = 26
        targetSdk = 36
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        multiDexEnabled = true
    }

    flavorDimensions += "env"
    productFlavors {
        dev {
            dimension = "env"
            applicationIdSuffix = ".dev"
            versionNameSuffix = "-dev"
            resValue("string", "app_name", "TestApp Dev")
        }
        prod {
            dimension = "env"
            resValue("string", "app_name", "TestApp")
        }
    }

    signingConfigs {
        release {
            keyAlias = keystoreProperties['keyAlias']
            keyPassword = keystoreProperties['keyPassword']
            storeFile = keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword = keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig = signingConfigs.release
            minifyEnabled = false
            shrinkResources = false
            // Optional: enable proguard if needed
            // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            // Optional: enable debug signing if needed
            signingConfig = signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.25"
    implementation "androidx.multidex:multidex:2.0.1"
}



////plugins {
////    id "com.android.application"
////    id "kotlin-android"
////    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
////    id "dev.flutter.flutter-gradle-plugin"
////}
////
////android {
////    namespace = "com.example.neuro_check_pro"
////    compileSdk = flutter.compileSdkVersion
////    ndkVersion = flutter.ndkVersion
////
////    compileOptions {
////        sourceCompatibility = JavaVersion.VERSION_1_8
////        targetCompatibility = JavaVersion.VERSION_1_8
////    }
////
////    kotlinOptions {
////        jvmTarget = JavaVersion.VERSION_1_8
////    }
////
////    defaultConfig {
////        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
////        applicationId = "com.example.neuro_check_pro"
////        // You can update the following values to match your application needs.
////        // For more information, see: https://flutter.dev/to/review-gradle-config.
////        minSdk = flutter.minSdkVersion
////        targetSdk = flutter.targetSdkVersion
////        versionCode = flutter.versionCode
////        versionName = flutter.versionName
////    }
////
////    buildTypes {
////        release {
////            // TODO: Add your own signing config for the release build.
////            // Signing with the debug keys for now, so `flutter run --release` works.
////            signingConfig = signingConfigs.debug
////        }
////    }
////}
////
////flutter {
////    source = "../.."
////}
//
//
//import java.util.regex.Matcher
//import java.util.regex.Pattern
//
//def localProperties = loadPropertiesFile('local.properties')
//def keystoreProperties = loadPropertiesFile('neuroCheckPro.properties')
//def flutterRoot = localProperties.getProperty('flutter.sdk')
//if (flutterRoot == null) {
//    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
//}
//
//def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
//if (flutterVersionCode == null) {
//    flutterVersionCode = '1'
//}
//
//def flutterVersionName = localProperties.getProperty('flutter.versionName')
//if (flutterVersionName == null) {
//    flutterVersionName = '1.0'
//}
//
//def loadPropertiesFile(String fileName) {
//    println(fileName)
//    def properties = new Properties()
//    def propertiesFile = rootProject.file(fileName)
//    if (propertiesFile.exists()) {
//        propertiesFile.withReader('UTF-8') { reader ->
//            properties.load(reader)
//        }
//    }
//    return properties
//}
//
//def getCurrentFlavor() {
//    Gradle gradle = getGradle()
//    String  tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
//
//    Pattern pattern
//    println(tskReqStr)
//    if( tskReqStr.contains( "assemble" ) )
//        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
//    else if( tskReqStr.contains("bundle") )
//        pattern = Pattern.compile("bundle(\\w+)(Release|Debug)")
//    else
//        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
//
//    Matcher matcher = pattern.matcher( tskReqStr )
//
//    if( matcher.find() )
//        return matcher.group(1).toLowerCase()
//    else
//    {
//        println "NO MATCH FOUND"
//        return ""
//    }
//}
//
//apply plugin: 'com.android.application'
//apply plugin: 'kotlin-android'
//apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
//
//android {
//    namespace "com.example.neuro_check_pro"
//    sourceSets {
//        main.java.srcDirs += 'src/main/kotlin'
//    }
//
//    defaultConfig {
//        applicationId = "com.example.neuro_check_pro"
//        // You can update the following values to match your application needs.
//        // For more information, see: https://flutter.dev/to/review-gradle-config.
//        minSdkVersion flutter.minSdkVersion
//        compileSdkVersion 35
//        targetSdkVersion 35
//        versionCode flutterVersionCode.toInteger()
//        versionName flutterVersionName
//    }
//    lintOptions {
//        checkReleaseBuilds false
//    }
//
//    signingConfigs {
//        release {
//            keyAlias keystoreProperties['keyAlias']
//            keyPassword keystoreProperties['keyPassword']
//            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
////            storeFile file("C:/Users/SABBIR/StudioProjects/emventory/key.jks")
//            storePassword keystoreProperties['storePassword']
//        }
//    }
//
//    buildTypes {
//        release {
//            signingConfig signingConfigs.debug
//        }
//    }
//
//    flavorDimensions "default"
//    productFlavors {
//        dev {
//            dimension "default"
//            applicationIdSuffix ".dev"
//        }
//        prod {
//            dimension "default"
//        }
//    }
//}
//
//flutter {
//    source '../..'
//    target "lib/main_" + getCurrentFlavor() + ".dart"
//}
//
//dependencies {
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
//}
